#include <iomanip>
    #include <iostream>   //  cout si cin 
    #include <cstdlib>  // <stdlib.h>   rand srand exit
    #include <ctime>    // <time.h>  time 
    #include <conio.h> 
    #include <cstring>  // string.h
    #include <windows.h>
    using namespace std;
    // supraincarcare 
    
   /* void show(char *mess, int  x)
   {
     cout<<mess<< x<<endl;
   }

   void show(char *mess, double  x)
   {
     cout<<mess<< x<<endl;
   }
   
    void show(char *mess, char  x)
   {
     cout<<mess<< x<<endl;
   }*/
	
	 // template 
	 template <typename T1>
	 void show(char *mess, T1  x)
   {
     cout<<mess<< x<<endl;
   } 
   	
   
	int INsert(char *mess,int x)
   {  
      cout<<mess;
      cin>>x;
      return x;
   }
 
    // supraincarcare 
	void insertV(int v[], int n)
   {
     for(int i=0; i<n; i++) v[i]= rand()%10;
   }
   void insertV(double v[], int n)
   {
     for(int i=0; i<n; i++) v[i] = rand()%10*1.357;
   }
   void insertV(char v[], int n)
   {
     for(int i=0; i<n; i++) v[i]= 'a' + rand()%26;
   }
   
   // supraincarcare 
   /* void showV(int v[], int n)
   {
     for(int i=0; i<n; i++) cout<<setw(3)<<v[i];
   }
   void showV(double v[], int n)
   {
     for(int i=0; i<n; i++) cout<<setw(7)<<v[i];
   }
   void showV(char v[], int n)
   {
     for(int i=0; i<n; i++) cout<<setw(3)<<v[i];
   }*/
	
	//template
	
	 template <typename T1>
	 void showV(T1 v[], int n)
   {
     for(int i=0; i<n; i++) cout<<setw(7)<<v[i];
   }
  	
  	// supraincarcare
	 /* int minmaxV(int v[], int n, bool x)
  {  
      int max=v[0];
	  int min=v[0];
  for(int i=1; i < n ;  i ++  ){
  if ( max < v[i]) max=v[i];
  if ( min > v[i]) min=v[i];
  }
  return x==0?max:min;
   } 
	
	  double minmaxV(double v[], int n, bool x)
  {  
      double max=v[0];
	  double min=v[0];
  for(int i=1; i < n ;  i ++  ){
  if ( max < v[i]) max=v[i];
  if ( min > v[i]) min=v[i];
  }
  return x==0?max:min;
   } 
   
   	  char minmaxV(char v[], int n, bool x)
  {  
      char max=v[0];
	  char min=v[0];
  for(int i=1; i < n ;  i ++  ){
  if ( max < v[i]) max=v[i];
  if ( min > v[i]) min=v[i];
  }
  return x==0?max:min;
   } */
	
	//template
	template <typename T1>
	T1 minmaxV(T1 v[], int n, bool x)
  {  
      T1 max=v[0];
	  T1 min=v[0];
  for(int i=1; i < n ;  i ++  ){
  if ( max < v[i]) max=v[i];
  if ( min > v[i]) min=v[i];
  }
  return x==0?max:min;
   } 
	
	
	// supraincarcare
/*	int cresdesV(int v[], int n, bool x)
	{
   bool y= true;
   while (y){
   y=false;
   for (int i=0, temp; i<n-1; i++){
   	if(x){
	   if (v[i]<v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	else {
       if (v[i]>v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	}}}
	
	double cresdesV (double v[], int n, bool x)
	{
   bool y= true;
   while (y){
   y=false;
   for (int i=0, temp; i<n-1; i++){
   	if(x){
	   if (v[i]<v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	else {
       if (v[i]>v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	}}}
	
		char cresdesV (char v[], int n, bool x)
	{
   bool y= true;
   while (y){
   y=false;
   for (int i=0, temp; i<n-1; i++){
   	if(x){
	   if (v[i]<v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	else {
       if (v[i]>v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	}}}*/
	
	//template
	template <typename T1>
	T1 cresdesV(T1 v[], int n, bool x)
	{
   bool y= true;
   while (y){
   y=false;
   for (int i=0, temp; i<n-1; i++){
   	if(x){
	   if (v[i]<v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	else {
       if (v[i]>v[i+1]){
       temp = v[i];
       v[i]=v[i+1];
       v[i+1]=temp;
       y=true;
	}}
	}}}
	
	// supraincarcare
	   void insertMa( int M[][100], int n, int m )
   {
     for(int i=0; i < n; i++)
      for(int j=0; j < m; j++)
        M[i][j] = rand()%10;
   }
	
	   void insertMa( double M[][100], int n, int m )
   {
     for(int i=0; i < n; i++)
      for(int j=0; j < m; j++)
        M[i][j] = rand()%10*1.357;
   }
   
      void insertMa( char M[][100], int n, int m )
   {
     for(int i=0; i < n; i++)
      for(int j=0; j < m; j++)
        M[i][j] = 'a' + rand()%26;
   }
   
   // supraincarcare
   /*void showMa( int M[][100], int n, int m )
   {
      for(int i=0; i < n; i++)
      {
       for(int j=0; j < m; j++)
         cout<<setw(3)<<M[i][j];
         cout<<endl;}}
         
         void showMa( double M[][100], int n, int m )
   {
      for(int i=0; i < n; i++)
      {
       for(int j=0; j < m; j++)
         cout<<setw(7)<<M[i][j];
         cout<<endl;}}
	
	void showMa( char M[][100], int n, int m )
   {
      for(int i=0; i < n; i++)
      {
       for(int j=0; j < m; j++)
         cout<<setw(3)<<M[i][j];
         cout<<endl;}}*/
         
    //template
	template <typename T1>     
    void showMa( T1 M[][100], int n, int m )
   {
      for(int i=0; i < n; i++)
      {
       for(int j=0; j < m; j++)
         cout<<setw(7)<<M[i][j];
         cout<<endl;}}
	
	  // supraincarcare
	  
	 /* int sumdiag(int M[][100], int n, int m, bool x)
  { int s=0;
   for ( int i=0; i < n; i++){

         if(x) s+=M[i][i]; 
       else s+= M[n-1-i][i];  
 }return s;} 
 
 double sumdiag(double M[][100], int n, int m, bool x)
  { double s=0;
   for ( int i=0; i < n; i++){

         if(x) s+=M[i][i]; 
       else s+= M[n-1-i][i];  
 }return s;}*/    
 
 //template
	template <typename T1>   
    T1 sumdiag(T1 M[][100], int n, int m, bool x)
    { T1 s=0;
    for ( int i=0; i < n; i++){

         if(x) s+=M[i][i]; 
       else s+= M[n-1-i][i];  
 }return s;} 
 
  //template
	template <typename T1> 
     T1 smm(T1 M[][100], int n, int m, int C, int ALG){
	 
     switch (C)  
	{case 1:{switch (ALG)  
	         {case 1:{T1 s = 0;
	         for (int i=0; i<n/2; i++){
	         	for (int j=0; j<m/2; j++) {s+=M[i][j];
				 }}return s;
			 }break;
	         
			  case 2:{T1 max = M[0][0];
	          for (int i=0; i<n/2; i++){
	         	for (int j=0; j<m/2; j++) { if ( max < M[i][j]) max=M[i][j];
				 }
			 }return max;
			  }break;
	          case 3:{T1 min = M[0][0];
	          for (int i=0; i<n/2; i++){
	         	for (int j=0; j<m/2; j++) { if ( min > M[i][j]) min=M[i][j];
				 }
			 }return min;}break;
	}break;

	   }
	case 2:{switch (ALG)  
	         {case 1:{T1 s = 0;
	         for (int i=0; i<n/2; i++){
	         	for (int j=m/2; j<m; j++) {s+=M[i][j];
				 }}return s;
			 }break;
	         
			  case 2:{T1 max = M[0][0];
	          for (int i=0; i<n/2; i++){
	         	for (int j=m/2; j<m; j++) { if ( max < M[i][j]) max=M[i][j];
				 }
			 }return max;
			  }break;
	          case 3:{T1 min = M[0][0];
	          for (int i=0; i<n/2; i++){
	         	for (int j=m/2; j<m; j++) { if ( min > M[i][j]) min=M[i][j];
				 }
			 }return min;}break;
	}break;  }
	
		case 3:{switch (ALG)  
	         {case 1:{T1 s = 0;
	         for (int i=n/2; i<n; i++){
	         	for (int j=0; j<m/2; j++) {s+=M[i][j];
				 }}return s;
			 }break;
	         
			  case 2:{T1 max = M[0][0];
	          for (int i=n/2; i<n; i++){
	         	for (int j=0; j<m/2; j++) { if ( max < M[i][j]) max=M[i][j];
				 }
			 }return max;
			  }break;
	          case 3:{T1 min = M[0][0];
	          for (int i=n/2; i<n; i++){
	         	for (int j=0; j<m/2; j++) { if ( min > M[i][j]) min=M[i][j];
				 }
			 }return min;}break;
	}break;  }  

		case 4:{switch (ALG)  
	         {case 1:{T1 s = 0;
	         for (int i=n/2; i<n; i++){
	         	for (int j=m/2; j<m; j++) {s+=M[i][j];
				 }}return s;
			 }break;
	         
			  case 2:{T1 max = M[0][0];
	          for (int i=n/2; i<n; i++){
	         	for (int j=m/2; j<m; j++) { if ( max < M[i][j]) max=M[i][j];
				 }
			 }return max;
			  }break;
	          case 3:{T1 min = M[0][0];
	          for (int i=n/2; i<n; i++){
	         	for (int j=m/2; j<m; j++) { if ( min > M[i][j]) min=M[i][j];
				 }
			 }return min;}break;
	}break;  }
	}  }
         
         
     
         
	int main() 
 { 
    srand(time(0));
    
    
    int n= INsert("Enter n=", 1);
    int v1[100]; 
    double v2[100];
    char v3[100];
    
	insertV (v1,n);	
    showV (v1,n);
    cout<<endl;
    insertV (v2,n);	
    showV (v2,n);
    cout<<endl;
    insertV (v3,n);	
    showV (v3,n);
    cout<<endl;
    
    int max1 = minmaxV(v1,n,0);
      show( " max  =" , max1 ); 	
  	int min1 = minmaxV(v1,n,1);
      show( " min  =" , min1); 
    
    double max2 = minmaxV(v2,n,0);
      show( " max  =" , max2 ); 	
  	double min2 = minmaxV(v2,n,1);
      show( " min  =" , min2 ); 
    
    char max3 = minmaxV(v3,n,0);
      show( " max  =" , max3 ); 	
  	char min3 = minmaxV(v3,n,1);
      show( " min  =" , min3 ); 
      
    
    cresdesV (v1,n,true);	
    showV (v1,n);
    cout<<endl;
    cresdesV (v1,n,false);	
    showV (v1,n);
    cout<<endl;

    cresdesV (v2,n,true);	
    showV (v2,n);
    cout<<endl;
    cresdesV (v2,n,false);	
    showV (v2,n);
    cout<<endl;
    
    cresdesV (v3,n,true);	
    showV (v3,n);
    cout<<endl;
    cresdesV (v3,n,false);	
    showV (v3,n);
    cout<<endl;
    
    int z= INsert("Enter z=", 1);
    int m= INsert("Enter m=", 1);
    int M1[100][100]; 
    double M2[100][100];
    char M3[100][100];
    insertMa( M1 , z , m );
      showMa( M1 , z , m ); 
      cout<<endl;
    insertMa( M2 , z , m );
      showMa( M2 , z , m ); 
      cout<<endl;
	insertMa( M3 , z , m );
      showMa( M3 , z , m ); 
      cout<<endl;  
      
    int sdp1 = sumdiag(M1,z,m,1);
    show( "Suma diagonalei principale  =" ,sdp1  );
	cout<<endl;
	int sds1 = sumdiag(M1,z,m,0); 
	show( "Suma diagonalei secundare  =" ,sds1  ); 
    cout<<endl; 
	
	int sdp2 = sumdiag(M2,z,m,1);
    show( "Suma diagonalei principale  =" ,sdp2  );
	cout<<endl;
	int sds2 = sumdiag(M2,z,m,0); 
	show( "Suma diagonalei secundare  =" ,sds2  ); 
    cout<<endl;  
    
    int sum1 = smm (M1, z, m,  1,  1);
    show ( "Suma cadranului 1  = " ,sum1  );
    
	int maxc1 = smm (M1, z, m,  1,  2);
    show ( "Val max cadranului 1  = " ,maxc1  );
    
	int minc1 = smm (M1, z, m,  1,  3);
    show ( "Val min cadranului 1  = " ,minc1  );
    
    
    int sum2 = smm (M1, z, m,  2,  1);
    show ( "Suma cadranului 2  = " ,sum2  );
    
	int maxc2 = smm (M1, z, m,  2,  2);
    show ( "Val max cadranului 2  = " ,maxc2  );
    
	int minc2 = smm (M1, z, m,  2,  3);
    show ( "Val min cadranului 2  = " ,minc2  );
    
    
    int sum3 = smm (M1, z, m,  3,  1);
    show ( "Suma cadranului 3  = " ,sum3  );
    
	int maxc3 = smm (M1, z, m,  3,  2);
    show ( "Val max cadranului 3  = " ,maxc3  );
    
	int minc3 = smm (M1, z, m,  3,  3);
    show ( "Val min cadranului 3  = " ,minc3  );
    
    
      int sum4 = smm (M1, z, m,  4,  1);
    show ( "Suma cadranului 4  = " ,sum4  );
    
	int maxc4 = smm (M1, z, m,  4,  2);
    show ( "Val max cadranului 4  = " ,maxc4  );
    
	int minc4 = smm (M1, z, m,  4,  3);
    show ( "Val min cadranului 4  = " ,minc4  );
    
    
    double sumd1 = smm (M2, z, m,  1,  1);
    show ( "Suma cadranului 1  = " ,sumd1  );
    
	double maxcd1 = smm (M2, z, m,  1,  2);
    show ( "Val max cadranului 1  = " ,maxcd1  );
    
	double mincd1 = smm (M2, z, m,  1,  3);
    show ( "Val min cadranului 1  = " ,mincd1  );
    
    
    double sumd2 = smm (M2, z, m,  2,  1);
    show ( "Suma cadranului 2  = " ,sumd2  );
    
	double maxcd2 = smm (M2, z, m,  2,  2);
    show ( "Val max cadranului 2  = " ,maxcd2  );
    
	double mincd2 = smm (M2, z, m,  2,  3);
    show ( "Val min cadranului 2  = " ,mincd2  );
    
    
    double sumd3 = smm (M2, z, m,  3,  1);
    show ( "Suma cadranului 3  = " ,sumd3  );
    
	double maxcd3 = smm (M2, z, m,  3,  2);
    show ( "Val max cadranului 3  = " ,maxcd3  );
    
	double mincd3 = smm (M2, z, m,  3,  3);
    show ( "Val min cadranului 3  = " ,mincd3  );
    
    
    double sumd4 = smm (M2, z, m,  4,  1);
    show ( "Suma cadranului 4  = " ,sumd4  );
    
	double maxcd4 = smm (M2, z, m,  4,  2);
    show ( "Val max cadranului 4  = " ,maxcd4  );
    
	double mincd4 = smm (M2, z, m,  4,  3);
    show ( "Val min cadranului 4  = " ,mincd4  );
	
	
	return 0;   
    }
